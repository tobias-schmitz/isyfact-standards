name: Release Maven
on:
  release:
    types: [released]
  workflow_call:

env:
  MAVEN_CLI_OPTS: '--batch-mode --errors --fail-at-end -T 1C'

jobs:

  Build:
    permissions:
      security-events: write
    uses: tobias-schmitz/isyfact-standards/.github/workflows/template_maven.yml@master
    with:
      jdk-version: 17
      version: '3.0.0-SNAPSHOT'
    secrets: inherit

  QualityGate:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Download Sonar Scan Meta Data
        uses: actions/download-artifact@v3
        with:
          name: Sonar Meta Data
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: "SonarCloud Quality Gate Status"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"


  Validate:
    # Check version format and existence in remote repository
    runs-on: ubuntu-latest
    # environment: Release
    steps:
      - name: Validate tagged version
        run: |
          RE_SEMVER="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$"
          
          if [[ ! "$GITHUB_REF_NAME" =~ $RE_SEMVER ]]; then
            echo "ERROR tag with value $GITHUB_REF_NAME is an invalid release or semantic version"
            echo "Release requires a current tag containing a valid SemVer 2.0.0. without pre-release version"
            exit 1
          fi
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          lfs: false
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
      - name: Validate project version
        run: |
          PROJECT_VERSION=$(mvn -Dexpression=project.version -q -DforceStdout -Drevision=$GITHUB_REF_NAME help:evaluate)
          if [ ! "$PROJECT_VERSION" = "$GITHUB_REF_NAME" ]; then
            echo "ERROR tag with value $GITHUB_REF_NAME does not correspond to project version $PROJECT_VERSION"
            exit 1
          fi
      - name: Check release existence
        continue-on-error: true
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USER_NAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        run: >
          mvn $MAVEN_CLI_OPTS $MAVEN_OPTS
          -Dexists.failIfExists=true
          -Dexists.skipIfSnapshot=true
          -Dexists.serverId=ossrh
          -Dexists.snapshotServerId=ossrh
          -Drevision=$GITHUB_REF_NAME
          -Dcentraldeploy=true
          org.honton.chas:exists-maven-plugin:0.7.0:remote

  Deploy:
    runs-on: ubuntu-latest
    # environment: Release
    needs: [Build, Validate, QualityGate]
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          lfs: false
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          # arguments for generated settings.xml, see https://github.com/actions/setup-java/blob/v3.11.0/docs/advanced-usage.md#publishing-using-apache-maven
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy

      - name: Package, Sign & Deploy
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USER_NAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        run: >
          mvn -DskipTests -Dspotbugs.skip -Dcheckstyle.skip  -DdeployAtEnd -Drevision=$GITHUB_REF_NAME
          $MAVEN_CLI_OPTS -P GPGsigning -P centralRelease cyclonedx:makeBom  cyclonedx:makeBom install
      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: |
            ~/.m2/repository/de/bund/bva/isyfact/**/${{ github.ref_name }}/*